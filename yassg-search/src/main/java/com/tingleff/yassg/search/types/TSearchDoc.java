/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tingleff.yassg.search.types;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-29")
public class TSearchDoc implements org.apache.thrift.TBase<TSearchDoc, TSearchDoc._Fields>, java.io.Serializable, Cloneable, Comparable<TSearchDoc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSearchDoc");

  private static final org.apache.thrift.protocol.TField DOC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("docId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField EXPLAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("explain", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSearchDocStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSearchDocTupleSchemeFactory();

  private int docId; // optional
  private java.util.Map<java.lang.String,java.lang.String> fields; // optional
  private TExplain explain; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOC_ID((short)1, "docId"),
    FIELDS((short)2, "fields"),
    EXPLAIN((short)3, "explain");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOC_ID
          return DOC_ID;
        case 2: // FIELDS
          return FIELDS;
        case 3: // EXPLAIN
          return EXPLAIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DOCID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOC_ID,_Fields.FIELDS,_Fields.EXPLAIN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOC_ID, new org.apache.thrift.meta_data.FieldMetaData("docId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXPLAIN, new org.apache.thrift.meta_data.FieldMetaData("explain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExplain.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSearchDoc.class, metaDataMap);
  }

  public TSearchDoc() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSearchDoc(TSearchDoc other) {
    __isset_bitfield = other.__isset_bitfield;
    this.docId = other.docId;
    if (other.isSetFields()) {
      java.util.Map<java.lang.String,java.lang.String> __this__fields = new java.util.HashMap<java.lang.String,java.lang.String>(other.fields);
      this.fields = __this__fields;
    }
    if (other.isSetExplain()) {
      this.explain = new TExplain(other.explain);
    }
  }

  public TSearchDoc deepCopy() {
    return new TSearchDoc(this);
  }

  @Override
  public void clear() {
    setDocIdIsSet(false);
    this.docId = 0;
    this.fields = null;
    this.explain = null;
  }

  public int getDocId() {
    return this.docId;
  }

  public void setDocId(int docId) {
    this.docId = docId;
    setDocIdIsSet(true);
  }

  public void unsetDocId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DOCID_ISSET_ID);
  }

  /** Returns true if field docId is set (has been assigned a value) and false otherwise */
  public boolean isSetDocId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DOCID_ISSET_ID);
  }

  public void setDocIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DOCID_ISSET_ID, value);
  }

  public int getFieldsSize() {
    return (this.fields == null) ? 0 : this.fields.size();
  }

  public void putToFields(java.lang.String key, java.lang.String val) {
    if (this.fields == null) {
      this.fields = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.fields.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getFields() {
    return this.fields;
  }

  public void setFields(java.util.Map<java.lang.String,java.lang.String> fields) {
    this.fields = fields;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  public TExplain getExplain() {
    return this.explain;
  }

  public void setExplain(TExplain explain) {
    this.explain = explain;
  }

  public void unsetExplain() {
    this.explain = null;
  }

  /** Returns true if field explain is set (has been assigned a value) and false otherwise */
  public boolean isSetExplain() {
    return this.explain != null;
  }

  public void setExplainIsSet(boolean value) {
    if (!value) {
      this.explain = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DOC_ID:
      if (value == null) {
        unsetDocId();
      } else {
        setDocId((java.lang.Integer)value);
      }
      break;

    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case EXPLAIN:
      if (value == null) {
        unsetExplain();
      } else {
        setExplain((TExplain)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DOC_ID:
      return getDocId();

    case FIELDS:
      return getFields();

    case EXPLAIN:
      return getExplain();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DOC_ID:
      return isSetDocId();
    case FIELDS:
      return isSetFields();
    case EXPLAIN:
      return isSetExplain();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TSearchDoc)
      return this.equals((TSearchDoc)that);
    return false;
  }

  public boolean equals(TSearchDoc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_docId = true && this.isSetDocId();
    boolean that_present_docId = true && that.isSetDocId();
    if (this_present_docId || that_present_docId) {
      if (!(this_present_docId && that_present_docId))
        return false;
      if (this.docId != that.docId)
        return false;
    }

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    boolean this_present_explain = true && this.isSetExplain();
    boolean that_present_explain = true && that.isSetExplain();
    if (this_present_explain || that_present_explain) {
      if (!(this_present_explain && that_present_explain))
        return false;
      if (!this.explain.equals(that.explain))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDocId()) ? 131071 : 524287);
    if (isSetDocId())
      hashCode = hashCode * 8191 + docId;

    hashCode = hashCode * 8191 + ((isSetFields()) ? 131071 : 524287);
    if (isSetFields())
      hashCode = hashCode * 8191 + fields.hashCode();

    hashCode = hashCode * 8191 + ((isSetExplain()) ? 131071 : 524287);
    if (isSetExplain())
      hashCode = hashCode * 8191 + explain.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSearchDoc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDocId()).compareTo(other.isSetDocId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docId, other.docId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExplain()).compareTo(other.isSetExplain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExplain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.explain, other.explain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSearchDoc(");
    boolean first = true;

    if (isSetDocId()) {
      sb.append("docId:");
      sb.append(this.docId);
      first = false;
    }
    if (isSetFields()) {
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
    }
    if (isSetExplain()) {
      if (!first) sb.append(", ");
      sb.append("explain:");
      if (this.explain == null) {
        sb.append("null");
      } else {
        sb.append(this.explain);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (explain != null) {
      explain.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSearchDocStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSearchDocStandardScheme getScheme() {
      return new TSearchDocStandardScheme();
    }
  }

  private static class TSearchDocStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSearchDoc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSearchDoc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.docId = iprot.readI32();
              struct.setDocIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.fields = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map16.size);
                java.lang.String _key17;
                java.lang.String _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readString();
                  _val18 = iprot.readString();
                  struct.fields.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPLAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.explain = new TExplain();
              struct.explain.read(iprot);
              struct.setExplainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSearchDoc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDocId()) {
        oprot.writeFieldBegin(DOC_ID_FIELD_DESC);
        oprot.writeI32(struct.docId);
        oprot.writeFieldEnd();
      }
      if (struct.fields != null) {
        if (struct.isSetFields()) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.fields.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter20 : struct.fields.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              oprot.writeString(_iter20.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.explain != null) {
        if (struct.isSetExplain()) {
          oprot.writeFieldBegin(EXPLAIN_FIELD_DESC);
          struct.explain.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSearchDocTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSearchDocTupleScheme getScheme() {
      return new TSearchDocTupleScheme();
    }
  }

  private static class TSearchDocTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSearchDoc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSearchDoc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDocId()) {
        optionals.set(0);
      }
      if (struct.isSetFields()) {
        optionals.set(1);
      }
      if (struct.isSetExplain()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDocId()) {
        oprot.writeI32(struct.docId);
      }
      if (struct.isSetFields()) {
        {
          oprot.writeI32(struct.fields.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter21 : struct.fields.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            oprot.writeString(_iter21.getValue());
          }
        }
      }
      if (struct.isSetExplain()) {
        struct.explain.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSearchDoc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.docId = iprot.readI32();
        struct.setDocIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fields = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map22.size);
          java.lang.String _key23;
          java.lang.String _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readString();
            struct.fields.put(_key23, _val24);
          }
        }
        struct.setFieldsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.explain = new TExplain();
        struct.explain.read(iprot);
        struct.setExplainIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

